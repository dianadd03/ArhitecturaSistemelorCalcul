.data
    n:.word 5
    k:.word 3
    v:.word 1, 2, 4, 9, 16
    str:.asciz " "
    msj:.asciz "Nr elemente cu k divizori: "
.text
main:
    lw t0, n
    lw t1, k
    la t2, v
    addi sp, sp, -4
    sw t0, 0(sp)
    addi sp, sp, -4
    sw t1, 0(sp)
    addi sp, sp, -4
    sw t2, 0(sp)
    call divizori_elem
    addi sp, sp, 12
    addi t0, a0, 0
    li a7, 4
    la a0, msj
    ecall
    addi a0, t0, 0
    li a7, 1
    ecall
    
exit:
    li a7, 93
    li a0, 0
    ecall
    
divizori_elem:
    addi sp, sp, -4
    sw ra, 0(sp)
    addi sp, sp, -4
    sw s0,0(sp)
    addi s0, sp, 0
    
    lw t0, 8(s0)
    lw t1, 12(s0)
    lw t2, 16(s0)
    
    addi sp, sp, -4
    sw s1, 0(sp)
    li s1, 0
    li a3, 0
et_loop:
    beq s1, t2, exit_loop
    lw a1, 0(t0)
    addi sp, sp, -4
    sw t0, 0(sp)
    addi sp, sp, -4
    sw t1, 0(sp)
    addi sp, sp, -4
    sw t2, 0(sp)
    addi sp, sp, -4
    sw a1, 0(sp)
    
    call divizori
 
    addi sp, sp, 4
    lw t2, 0(sp)
    lw t1, 4(sp)
    lw t0, 8(sp)
    addi sp, sp, 12
    
    beq a0, t1, update
cont:
    addi s1, s1, 1
    addi t0, t0, 4
    j et_loop
    
update:
    addi a3, a3, 1
    j cont
    
exit_loop:
    addi a0, a3, 0
    lw s1, -4(s0)
    lw ra, 4(s0)
    lw s0, 0(s0)
    addi sp, sp, 12
    ret
    
divizori:
    addi sp, sp, -4
    sw ra, 0(sp)
    addi, sp, sp, -4
    sw s0, 0(sp)
    addi s0, sp, 0
    lw t1, 8(s0)
    li a1, 0
    addi sp, sp, -4
    sw s1, 0(sp)
    li s1, 1
div_loop:
    bgt s1, t1, div_exit
    
    rem a2, t1, s1
    beq a2, zero, count
div_cont:
    addi s1, s1, 1
    j div_loop
count:
    addi a1, a1, 1
    j div_cont
div_exit:
    lw s1, -4(s0)
    lw ra, 4(s0)
    lw s0, 0(s0)
    addi sp, sp, 12
    addi a0, a1, 0
    ret
    